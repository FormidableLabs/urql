warning: LF will be replaced by CRLF in exchanges/graphcache/src/operations/invalidate.ts.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in exchanges/graphcache/src/store/data.ts.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in exchanges/graphcache/src/store/store.test.ts.
The file will have its original line endings in your working directory.
[1mdiff --git a/exchanges/graphcache/src/operations/invalidate.ts b/exchanges/graphcache/src/operations/invalidate.ts[m
[1mindex b88d9c4..2e6ccfe 100644[m
[1m--- a/exchanges/graphcache/src/operations/invalidate.ts[m
[1m+++ b/exchanges/graphcache/src/operations/invalidate.ts[m
[36m@@ -18,7 +18,7 @@[m [mexport const invalidateEntity = ([m
 [m
   for (let i = 0, l = fields.length; i < l; i++) {[m
     const { fieldKey } = fields[i];[m
[31m-    if (InMemoryData.readLink(entityKey, fieldKey)) {[m
[32m+[m[32m    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {[m
       InMemoryData.writeLink(entityKey, fieldKey, undefined);[m
     } else {[m
       InMemoryData.writeRecord(entityKey, fieldKey, undefined);[m
[1mdiff --git a/exchanges/graphcache/src/store/store.test.ts b/exchanges/graphcache/src/store/store.test.ts[m
[1mindex 0810beb..39abe9e 100644[m
[1m--- a/exchanges/graphcache/src/store/store.test.ts[m
[1m+++ b/exchanges/graphcache/src/store/store.test.ts[m
[36m@@ -182,6 +182,38 @@[m [mdescribe('Store with OptimisticMutationConfig', () => {[m
     expect(InMemoryData.readRecord('Todo:0', 'text')).toBe(undefined);[m
   });[m
 [m
[32m+[m
[32m+[m[32m  it('should invalidate null keys correctly', () => {[m
[32m+[m[32m    const connection = gql`[m
[32m+[m[32m      query test {[m
[32m+[m[32m        exercisesConnection(page: { after: null, first: 10 }) {[m
[32m+[m[32m          id[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m    `[m
[32m+[m
[32m+[m[32m    write(store, {[m
[32m+[m[32m      query: connection,[m
[32m+[m[32m      // @ts-ignore[m
[32m+[m[32m    }, {[m
[32m+[m[32m      exercisesConnection: null[m
[32m+[m[32m    })[m
[32m+[m[32m    let { data } = query(store, { query: connection });[m
[32m+[m
[32m+[m[32m    InMemoryData.initDataState(store.data, null);[m
[32m+[m[32m    expect((data as any).exercisesConnection).toEqual(null);[m
[32m+[m[32m    const fields = store.inspectFields({ __typename: 'Query' });[m
[32m+[m[32m    fields.forEach(({ fieldName, arguments: args }) => {[m
[32m+[m[32m      if (fieldName === 'exercisesConnection') {[m
[32m+[m[32m        store.invalidate('Query', fieldName, args);[m
[32m+[m[32m      }[m
[32m+[m[32m    })[m
[32m+[m[32m    InMemoryData.clearDataState();[m
[32m+[m
[32m+[m[32m    ({ data } = query(store, { query: connection }));[m
[32m+[m[32m    expect(data).toBe(null);[m
[32m+[m[32m  });[m
[32m+[m
   it('should be able to invalidate data with arguments', () => {[m
     write([m
       store,[m
